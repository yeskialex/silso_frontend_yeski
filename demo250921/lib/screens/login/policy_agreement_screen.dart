import 'package:flutter/material.dart';
import 'package:url_launcher/url_launcher.dart'; // PDF ÎßÅÌÅ¨Î•º Ïó¥Í∏∞ ÏúÑÌï¥ Ìå®ÌÇ§ÏßÄ Ï∂îÍ∞Ä ÌïÑÏöî
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../../../services/community_service.dart';
import '../login_silpet_select/mypet_select.dart'; // ÎßàÏù¥Ìåª select
import '../../services/onboarding_guard_service.dart';

class PolicyAgreementScreen extends StatefulWidget {
  const PolicyAgreementScreen({super.key});

  @override
  State<PolicyAgreementScreen> createState() => _PolicyAgreementScreenState();
}

class _PolicyAgreementScreenState extends State<PolicyAgreementScreen>
    with TickerProviderStateMixin {
  final CommunityService _communityService = CommunityService();
  bool _termsAccepted = false;
  bool _privacyAccepted = false;
  bool _communityGuidelinesAccepted = false;
  bool _isLoading = false;

  // Animation controllers
  late AnimationController _buttonAnimationController;
  late Animation<double> _buttonScaleAnimation;
  late AnimationController _progressAnimationController;
  late Animation<double> _progressAnimation;
  late AnimationController _checkboxAnimationController;
  late Animation<double> _checkboxAnimation;

  bool get _allPoliciesAccepted =>
      _termsAccepted && _privacyAccepted && _communityGuidelinesAccepted;

  @override
  void initState() {
    super.initState();
    print("screens/community/policy_agreement_screen.dart is showing");

    // Check onboarding prerequisites before showing policy agreement
    _checkOnboardingPrerequisites();

    // Initialize animations
    _buttonAnimationController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );

    _buttonScaleAnimation = Tween<double>(
      begin: 1.0,
      end: 1.05,
    ).animate(CurvedAnimation(
      parent: _buttonAnimationController,
      curve: Curves.easeInOut,
    ));

    _progressAnimationController = AnimationController(
      duration: const Duration(milliseconds: 500),
      vsync: this,
    );

    _progressAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0, // Final step - complete progress
    ).animate(CurvedAnimation(
      parent: _progressAnimationController,
      curve: Curves.easeInOut,
    ));

    _checkboxAnimationController = AnimationController(
      duration: const Duration(milliseconds: 200),
      vsync: this,
    );

    _checkboxAnimation = Tween<double>(
      begin: 1.0,
      end: 1.1,
    ).animate(CurvedAnimation(
      parent: _checkboxAnimationController,
      curve: Curves.easeInOut,
    ));

    // Start progress animation
    _progressAnimationController.forward();
  }

  /// Check if user has completed prerequisites before accessing policy agreement
  Future<void> _checkOnboardingPrerequisites() async {
    try {
      final User? user = FirebaseAuth.instance.currentUser;
      if (user == null) {
        print('üö´ PolicyAgreement: No authenticated user');
        if (mounted) {
          Navigator.of(context).pushReplacementNamed('/login');
        }
        return;
      }

      final userDoc = await FirebaseFirestore.instance.collection('users').doc(user.uid).get();
      
      if (!userDoc.exists) {
        print('üö´ PolicyAgreement: User document does not exist');
        if (mounted) {
          Navigator.of(context).pushReplacementNamed('/login');
        }
        return;
      }

      final data = userDoc.data();
      final progress = data?['onboardingProgress'] as Map<String, dynamic>?;
      
      if (progress == null) {
        print('üö´ PolicyAgreement: No onboarding progress found');
        if (mounted) {
          Navigator.of(context).pushReplacementNamed('/login');
        }
        return;
      }

      // Check if previous steps are completed (category selection must be done first)
      final categorySelected = progress['categorySelected'] == true;
      
      if (!categorySelected) {
        print('üö´ PolicyAgreement: Category selection not completed');
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ†ÌÉùÏùÑ Î®ºÏ†Ä ÏôÑÎ£åÌï¥Ï£ºÏÑ∏Ïöî.'),
              backgroundColor: Colors.orange,
            ),
          );
          Navigator.of(context).pushReplacementNamed('/category-selection');
        }
        return;
      }

      print('‚úÖ PolicyAgreement: Prerequisites met');
      
    } catch (e) {
      print('‚ùå PolicyAgreement: Error checking prerequisites: $e');
      if (mounted) {
        Navigator.of(context).pushReplacementNamed('/login');
      }
    }
  }

  @override
  void dispose() {
    _buttonAnimationController.dispose();
    _progressAnimationController.dispose();
    _checkboxAnimationController.dispose();
    super.dispose();
  }

  void _triggerButtonAnimation() {
    _buttonAnimationController.forward().then((_) {
      _buttonAnimationController.reverse();
    });
  }

  void _triggerCheckboxAnimation() {
    _checkboxAnimationController.forward().then((_) {
      _checkboxAnimationController.reverse();
    });
  }

  Future<void> _confirmAndFinish() async {
    if (!_allPoliciesAccepted) {
      _showValidationError('Ï†ïÏ±Ö ÎèôÏùò ÌïÑÏöî', 'Î™®Îì† Ï†ïÏ±ÖÏóê ÎèôÏùòÌï¥Ï£ºÏÖîÏïº ÏÑúÎπÑÏä§Î•º Ïù¥Ïö©ÌïòÏã§ Ïàò ÏûàÏäµÎãàÎã§.');
      return;
    }

    setState(() => _isLoading = true);

    try {
      await _communityService.agreePolicies();

      if (mounted) {
        _showSuccessDialog();
      }
    } catch (e) {
      if (mounted) {
        _showValidationError('Ïò§Î•ò', 'ÏÑ§Ï†ï ÏôÑÎ£åÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: ${e.toString()}');
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  void _showValidationError(String title, String message) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
        ),
        title: Text(
          title,
          style: const TextStyle(
            fontFamily: 'Pretendard',
            fontWeight: FontWeight.w600,
          ),
        ),
        content: Text(
          message,
          style: const TextStyle(
            fontFamily: 'Pretendard',
            fontWeight: FontWeight.w400,
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text(
              'ÌôïÏù∏',
              style: TextStyle(
                color: Color(0xFF5F37CF),
                fontFamily: 'Pretendard',
                fontWeight: FontWeight.w600,
              ),
            ),
          ),
        ],
      ),
    );
  }

  void _showSuccessDialog() {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.white,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              width: 80,
              height: 80,
              decoration: const BoxDecoration(
                color: Color(0xFF5F37CF),
                shape: BoxShape.circle,
              ),
              child: const Icon(
                Icons.check,
                size: 40,
                color: Colors.white,
              ),
            ),
            const SizedBox(height: 24),
            const Text(
              'Ïª§ÎÆ§ÎãàÌã∞Ïóê Ïò§Ïã† Í≤ÉÏùÑ\nÌôòÏòÅÌï©ÎãàÎã§!',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.w600,
                color: Color(0xFF121212),
                fontFamily: 'Pretendard',
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 16),
            const Text(
              'ÌîÑÎ°úÌïÑ ÏÑ§Ï†ïÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.\nÏù¥Ï†ú Îã§Î•∏ Ïª§ÎÆ§ÎãàÌã∞ Î©§Î≤ÑÎì§Í≥º ÏÜåÌÜµÌïòÏã§ Ïàò ÏûàÏäµÎãàÎã§.',
              style: TextStyle(
                fontSize: 16,
                color: Color(0xFFC7C7C7),
                fontFamily: 'Pretendard',
                fontWeight: FontWeight.w400,
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 24),
            SizedBox(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: () {
                  Navigator.of(context).pushAndRemoveUntil(
                    MaterialPageRoute(builder: (context) => const PetCreationScreen()), // ÎßàÏù¥Ìåª select
                    (route) => route.settings.name == '/temporary-home',
                  );
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: const Color(0xFF5F37CF),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                  padding: const EdgeInsets.symmetric(vertical: 16),
                ),
                child: const Text(
                  'ÏãúÏûëÌïòÍ∏∞',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    color: Colors.white,
                    fontFamily: 'Pretendard',
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  // --- ‚ú® New Feature Start ---
  // Ï†ÑÏ≤¥ ÏÑúÎπÑÏä§ Ïù¥Ïö©ÏïΩÍ¥Ä Î∞è Î∂ÄÏπôÏùÑ Î≥¥Ïó¨Ï£ºÎäî Îã§Ïù¥ÏñºÎ°úÍ∑∏
  void _showFullTermsDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        title: const Text(
          'ÏÑúÎπÑÏä§ Ïù¥Ïö©ÏïΩÍ¥Ä Ï†ÑÏ≤¥Î≥¥Í∏∞',
          style: TextStyle(fontFamily: 'Pretendard',fontSize: 18, fontWeight: FontWeight.w500),
        ),
        content: SingleChildScrollView(
          child: RichText(
            text: const TextSpan(
              style: TextStyle(fontFamily: 'Pretendard', fontSize: 14, color: Color.fromARGB(255, 249, 247, 255)),
              children: [
                TextSpan(text: "Î≥∏ ÏïΩÍ¥ÄÏùÄ Í∑ÄÌïòÍ∞Ä Ïã§ÏÜå(SilSo)Í∞Ä Ï†úÍ≥µÌïòÎäî ÏÑúÎπÑÏä§Î•º Ïù¥Ïö©Ìï®Ïóê ÏûàÏñ¥, ÌöåÏÇ¨ÏôÄ Ïù¥Ïö©Ïûê Í∞ÑÏùò Í∂åÎ¶¨, ÏùòÎ¨¥ Î∞è Ï±ÖÏûÑÏÇ¨Ìï≠ÏùÑ Í∑úÏ†ïÌï®ÏùÑ Î™©Ï†ÅÏúºÎ°ú Ìï©ÎãàÎã§. [cite: 2]\n\n"),
                TextSpan(text: "Ï†ú1Ï°∞ [Î™©Ï†Å Î∞è Ï†ïÏùò]\n", style: TextStyle(fontWeight: FontWeight.bold)),
                TextSpan(text: "Î≥∏ ÏïΩÍ¥ÄÏùÄ ÌöåÏÇ¨Í∞Ä Ïö¥ÏòÅÌïòÎäî Ïã§ÏÜå ÌîåÎû´ÌèºÍ≥º Í¥ÄÎ†®ÌïòÏó¨ ÌïÑÏöîÌïú ÏÇ¨Ìï≠ÏùÑ Í∑úÏ†ïÌï©ÎãàÎã§. [cite: 5]\n\n"),
                TextSpan(text: "Ï†ú2Ï°∞ [ÏïΩÍ¥ÄÏùò Í≤åÏãú, Ìö®Î†• Î∞è Î≥ÄÍ≤Ω]\n", style: TextStyle(fontWeight: FontWeight.bold)),
                TextSpan(text: "ÌöåÏÇ¨Îäî Î≥∏ ÏïΩÍ¥ÄÏùÑ ÌîåÎû´Ìèº Ï¥àÍ∏∞ÌôîÎ©¥ Îì±ÏùÑ ÌÜµÌï¥ Í≤åÏãúÌïòÎ©∞, Î≥ÄÍ≤Ω Ïãú ÏÇ¨Ï†Ñ Í≥µÏßÄÌï©ÎãàÎã§. [cite: 12, 13]\n\n"),
                TextSpan(text: "Ï†ú3Ï°∞ [ÏÑúÎπÑÏä§ Ïù¥Ïö©Í≥ÑÏïΩÏùò Ï≤¥Í≤∞ Î∞è ÌöåÏõêÍ∞ÄÏûÖ]\n", style: TextStyle(fontWeight: FontWeight.bold)),
                TextSpan(text: "Ïù¥Ïö©Í≥ÑÏïΩÏùÄ ÏïΩÍ¥Ä ÎèôÏùò Î∞è ÌöåÏõêÍ∞ÄÏûÖ ÏôÑÎ£å ÌõÑ ÌöåÏÇ¨Ïùò ÏäπÎÇôÏúºÎ°ú ÏÑ±Î¶ΩÎê©ÎãàÎã§. [cite: 18]\n\n"),
                TextSpan(text: "Ï†ú4Ï°∞ [ÏÑúÎπÑÏä§ ÎÇ¥Ïö© Î∞è Î≥ÄÍ≤Ω]\n", style: TextStyle(fontWeight: FontWeight.bold)),
                TextSpan(text: "ÌöåÏÇ¨Îäî Ïã§Ìå® Í≤ΩÌóò Í≥µÏú†, ÌöåÍ≥† Î∂ÑÏÑù, Ïª§ÎÆ§ÎãàÌã∞ Í∏∞Îä•, AI Í∏∞Î∞ò ÌîºÎìúÎ∞± Îì±Ïùò ÏÑúÎπÑÏä§Î•º Ï†úÍ≥µÌïòÎ©∞, ÎÇ¥Ïö©ÏùÄ Î≥ÄÍ≤ΩÎê† Ïàò ÏûàÏäµÎãàÎã§. [cite: 24, 30]\n\n"),
                TextSpan(text: "Ï†ú5Ï°∞ [ÌöåÏõêÏùò ÏùòÎ¨¥ Î∞è Í∏àÏßÄÌñâÏúÑ]\n", style: TextStyle(fontWeight: FontWeight.bold)),
                TextSpan(text: "ÌöåÏõêÏùÄ Í≥ÑÏ†ï Í±∞Îûò, Î∂àÎ≤ï/Ï∞®Î≥ÑÏ†Å/ÏïÖÏùòÏ†Å ÌñâÏúÑ, ÌÉÄÏù∏Ïùò Í∂åÎ¶¨ Ïπ®Ìï¥, ÏÑúÎπÑÏä§ Ï°∞Ïûë Îì± ÏïΩÍ¥ÄÏóê ÏúÑÎ∞∞ÎêòÎäî ÌñâÏúÑÎ•º Ìï¥ÏÑúÎäî Ïïà Îê©ÎãàÎã§. [cite: 33, 34, 35, 36, 48]\n\n"),
                TextSpan(text: "Ï†ú6Ï°∞ [ÏÇ¨Ïö©Ïûê Í≤åÏãú ÏΩòÌÖêÏ∏†]\n", style: TextStyle(fontWeight: FontWeight.bold)),
                TextSpan(text: "Í≤åÏãúÎ¨ºÏùò ÏÜåÏú†Í∂åÏùÄ ÌöåÏõêÏóêÍ≤å ÏûàÏúºÎÇò, ÌöåÏÇ¨Îäî ÏÑúÎπÑÏä§ Ïö¥ÏòÅ, ÌôçÎ≥¥, Ïó∞Íµ¨ Îì±ÏùÑ ÏúÑÌï¥ Ìï¥Îãπ ÏΩòÌÖêÏ∏†Î•º ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎäî ÎùºÏù¥ÏÑ†Ïä§Î•º Î∂ÄÏó¨Î∞õÏäµÎãàÎã§. [cite: 58, 59] ÌöåÏõêÏùÄ ÏΩòÌÖêÏ∏†Ïóê ÎåÄÌïú Ï±ÖÏûÑÏùÑ ÏßÄÎ©∞, ÌöåÏÇ¨Îäî Î∂ÄÏ†ÅÏ†àÌïú ÏΩòÌÖêÏ∏†Î•º Ï†úÌïúÌï† Ïàò ÏûàÏäµÎãàÎã§. [cite: 71, 82]\n\n"),
                TextSpan(text: "Ï†ú7Ï°∞ [ÏÑúÎπÑÏä§ Ïù¥Ïö©Ïùò Ï†úÌïú Î∞è ÌÉàÌá¥]\n", style: TextStyle(fontWeight: FontWeight.bold)),
                TextSpan(text: "ÏïΩÍ¥Ä ÏúÑÎ∞ò Ïãú ÏÑúÎπÑÏä§ Ïù¥Ïö©Ïù¥ Ï†úÌïúÎê† Ïàò ÏûàÏúºÎ©∞, ÌöåÏõêÏùÄ Ïñ∏Ï†úÎì†ÏßÄ ÌÉàÌá¥Ìï† Ïàò ÏûàÏäµÎãàÎã§. [cite: 102, 104]\n\n"),
                TextSpan(text: "Ï†ú8Ï°∞ [Í∞úÏù∏Ï†ïÎ≥¥Ïùò Î≥¥Ìò∏ Î∞è ÌôúÏö©]\n", style: TextStyle(fontWeight: FontWeight.bold)),
                TextSpan(text: "Í∞úÏù∏Ï†ïÎ≥¥Îäî Í¥ÄÎ†® Î≤ïÎ†πÏóê Îî∞Îùº Î≥¥Ìò∏ÎêòÎ©∞, ÏÑúÎπÑÏä§ Ï†úÍ≥µ Î∞è Í∞úÏÑ† Î™©Ï†ÅÏúºÎ°ú ÌôúÏö©Îê©ÎãàÎã§. [cite: 107, 108]\n\n"),
                TextSpan(text: "Ï†ú9Ï°∞ [ÏßÄÏãùÏû¨ÏÇ∞Í∂å Î∞è ÏΩòÌÖêÏ∏† ÌôúÏö©]\n", style: TextStyle(fontWeight: FontWeight.bold)),
                TextSpan(text: "ÌîåÎû´ÌèºÏùò ÏßÄÏãùÏû¨ÏÇ∞Í∂åÏùÄ ÌöåÏÇ¨Ïóê Í∑ÄÏÜçÎê©ÎãàÎã§. [cite: 114]\n\n"),
                TextSpan(text: "Ï†ú10Ï°∞ [Î©¥Ï±ÖÏ°∞Ìï≠]\n", style: TextStyle(fontWeight: FontWeight.bold)),
                TextSpan(text: "Ï≤úÏû¨ÏßÄÎ≥Ä Îì± Î∂àÍ∞ÄÌï≠Î†•Ïù¥ÎÇò ÌöåÏõê Í∞ÑÏùò Î∂ÑÏüÅÏóê ÎåÄÌï¥ ÌöåÏÇ¨Îäî Ï±ÖÏûÑÏùÑ ÏßÄÏßÄ ÏïäÏäµÎãàÎã§. [cite: 117, 122]\n\n"),
                TextSpan(text: "Ï†ú11Ï°∞ [Ï§ÄÍ±∞Î≤ï Î∞è Î∂ÑÏüÅÌï¥Í≤∞]\n", style: TextStyle(fontWeight: FontWeight.bold)),
                TextSpan(text: "Î≥∏ ÏïΩÍ¥ÄÏùÄ ÎåÄÌïúÎØºÍµ≠ Î≤ïÎ†πÏóê Îî∞Î•¥Î©∞, Î∂ÑÏüÅ Î∞úÏÉù Ïãú ÌöåÏÇ¨ Î≥∏ÏÇ¨ ÏÜåÏû¨ÏßÄ Í¥ÄÌï† Î≤ïÏõêÏóêÏÑú Ìï¥Í≤∞Ìï©ÎãàÎã§. [cite: 124]\n\n"),
                TextSpan(text: "[Î∂ÄÏπô]\n", style: TextStyle(fontWeight: FontWeight.bold)),
                TextSpan(text: "Î≥∏ ÏïΩÍ¥ÄÏùÄ 2025ÎÖÑ 8Ïõî 6ÏùºÎ∂ÄÌÑ∞ ÏãúÌñâÎê©ÎãàÎã§. [cite: 126]"),
              ],
            ),
          ),
        ),
        actions: [
          TextButton(
            onPressed: () async {
              // Ìò∏Ïä§ÌåÖÎêú PDF ÌååÏùºÏùò URLÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî. (Ïã§ÏÜåÏù¥Ïö©ÏïΩÍ¥Ä / silso contract)
              final Uri pdfUrl = Uri.parse('https://drive.google.com/file/d/1wLnKbJmmXIrVyRgpzYmUt6LNrOxjftvc/view?usp=sharing');
              
              // url_launcher Ìå®ÌÇ§ÏßÄÎ•º ÏÇ¨Ïö©ÌïòÏó¨ URLÏùÑ ÏóΩÎãàÎã§.
              // Ïù¥ Í∏∞Îä•ÏùÑ ÏÇ¨Ïö©ÌïòÎ†§Î©¥ pubspec.yaml ÌååÏùºÏóê url_launcherÎ•º Ï∂îÍ∞ÄÌï¥Ïïº Ìï©ÎãàÎã§.
              if (await canLaunchUrl(pdfUrl)) {
                await launchUrl(pdfUrl);
              } else {
                // URLÏùÑ Ïó¥ Ïàò ÏóÜÎäî Í≤ΩÏö∞ ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÏïåÎ¶º
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('PDF Î¨∏ÏÑúÎ•º Ïó¥ Ïàò ÏóÜÏäµÎãàÎã§.')),
                );
              }
            },
            child: const Text(
              'PDF ÏõêÎ¨∏ Î≥¥Í∏∞',
              style: TextStyle(color: Color.fromARGB(255, 249, 247, 255), fontFamily: 'Pretendard', fontWeight: FontWeight.w600),
            ),
          ),
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text(
              'Îã´Í∏∞',
              style: TextStyle(color: Color.fromARGB(255, 249, 247, 255), fontFamily: 'Pretendard', fontWeight: FontWeight.w600),
            ),
          ),
        ],
      ),
    );
  }
  // --- ‚ú® New Feature End ---

  @override
  Widget build(BuildContext context) {
    final screenWidth = MediaQuery.of(context).size.width;
    const double baseWidth = 393.0;
    final double widthRatio = screenWidth / baseWidth;

    return Scaffold(
      backgroundColor: const Color(0xFFFAFAFA),
      appBar: _buildAppBar(context, widthRatio),
      body: Column(
        children: [
          Expanded(
            child: _buildMainContent(context, widthRatio),
          ),
          _buildBottomButton(context, widthRatio),
        ],
      ),
    );
  }

  /// Build app bar with progress indicator
  PreferredSizeWidget _buildAppBar(BuildContext context, double widthRatio) {
    return AppBar(
      backgroundColor: const Color(0xFFFAFAFA),
      elevation: 0,
      leading: IconButton(
        icon: const Icon(Icons.arrow_back_ios, color: Colors.black),
        onPressed: () {
          // Navigate back to category selection screen
          Navigator.of(context).pushReplacementNamed('/category-selection');
        },
      ),
      title: Row(
        children: [
          Expanded(
            child: ClipRRect(
              borderRadius: BorderRadius.circular(10),
              child: AnimatedBuilder(
                animation: _progressAnimation,
                builder: (context, child) {
                  return LinearProgressIndicator(
                    value: _progressAnimation.value,
                    backgroundColor: const Color(0xFFE0E0E0),
                    color: const Color(0xFF5F37CF),
                    minHeight: 8,
                  );
                },
              ),
            ),
          ),
        ],
      ),
    );
  }

  /// Build main content area
  Widget _buildMainContent(BuildContext context, double widthRatio) {
    return SingleChildScrollView(
      child: Padding(
        padding: EdgeInsets.symmetric(horizontal: 16 * widthRatio),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            SizedBox(height: 60 * widthRatio),

            // Title
            Text(
              'Ï†ïÏ±Ö Í≤ÄÌÜ† Î∞è\nÎèôÏùòÌï¥Ï£ºÏÑ∏Ïöî',
              style: TextStyle(
                color: const Color(0xFF121212),
                fontSize: 24 * widthRatio,
                fontFamily: 'Pretendard',
                fontWeight: FontWeight.w600,
                height: 1.21,
              ),
            ),

            SizedBox(height: 16 * widthRatio),

            // Subtitle
            Text(
              'ÌîÑÎ°úÌïÑ ÏÑ§Ï†ïÏùÑ ÏôÑÎ£åÌïòÍ∏∞ ÏúÑÌï¥ Ïª§ÎÆ§ÎãàÌã∞ Ï†ïÏ±ÖÏùÑ Í≤ÄÌÜ†ÌïòÍ≥† ÎèôÏùòÌï¥Ï£ºÏÑ∏Ïöî',
              style: TextStyle(
                color: const Color(0xFFC7C7C7),
                fontSize: 16 * widthRatio,
                fontFamily: 'Pretendard',
                fontWeight: FontWeight.w600,
                height: 1.39,
              ),
            ),

            SizedBox(height: 32 * widthRatio),

            // Policy Checkboxes
            _buildPolicyCheckbox(
              title: 'ÏÑúÎπÑÏä§ Ïù¥Ïö©ÏïΩÍ¥Ä',
              description: 'ÏÑúÎπÑÏä§Ïùò Í∏∞Î≥∏ Í∑úÏπô, ÏÇ¨Ïö©ÏûêÏùò Í∂åÎ¶¨ÏôÄ ÏùòÎ¨¥, Í≤åÏãúÎ¨º ÏÇ¨Ïö©Í∂å Î∂ÄÏó¨ Îì±Ïóê Í¥ÄÌïú ÎÇ¥Ïö©ÏùÑ ÌôïÏù∏ÌïòÍ≥† Ïù¥Ïóê ÎèôÏùòÌï©ÎãàÎã§.',
              value: _termsAccepted,
              onChanged: (value) {
                setState(() => _termsAccepted = value ?? false);
                _triggerCheckboxAnimation();
                _triggerButtonAnimation();
              },
              widthRatio: widthRatio,
            ),

            _buildPolicyCheckbox(
              title: 'Í∞úÏù∏Ï†ïÎ≥¥Ï≤òÎ¶¨Î∞©Ïπ®',
              description: 'ÌöåÏõêÍ∞ÄÏûÖ Î∞è ÏÑúÎπÑÏä§ Ïù¥Ïö© Í≥ºÏ†ïÏóêÏÑú Ïù¥Î©îÏùº, Ïù¥Ïö© Í∏∞Î°ù Îì±Ïùò Í∞úÏù∏Ï†ïÎ≥¥Í∞Ä ÏàòÏßëÎêòÎ©∞, ÏÑúÎπÑÏä§ Í∞úÏÑ† Î∞è AI ÌïôÏäµÏóê ÌôúÏö©Îê®ÏùÑ ÌôïÏù∏ÌïòÍ≥† ÎèôÏùòÌï©ÎãàÎã§.',
              value: _privacyAccepted,
              onChanged: (value) {
                setState(() => _privacyAccepted = value ?? false);
                _triggerCheckboxAnimation();
                _triggerButtonAnimation();
              },
              widthRatio: widthRatio,
            ),

            _buildPolicyCheckbox(
              title: 'Ïª§ÎÆ§ÎãàÌã∞ Í∞ÄÏù¥ÎìúÎùºÏù∏',
              description: 'ÌÉÄÏù∏ ÎπÑÎ∞©, Ï∞®Î≥Ñ, Î∂àÎ≤ï Ï†ïÎ≥¥ Í≤åÏãú Îì± Ïª§ÎÆ§ÎãàÌã∞ ÏïàÏ†ïÏÑ±ÏùÑ Ï†ÄÌï¥ÌïòÎäî ÌôúÎèôÏùÑ ÌïòÏßÄ ÏïäÏùÑ Í≤ÉÏùÑ ÏïΩÏÜçÌïòÎ©∞, ÏúÑÎ∞ò Ïãú ÏÑúÎπÑÏä§ Ïù¥Ïö©Ïù¥ Ï†úÌïúÎê† Ïàò ÏûàÏùåÏùÑ ÌôïÏù∏Ìï©ÎãàÎã§.',
              value: _communityGuidelinesAccepted,
              onChanged: (value) {
                setState(() => _communityGuidelinesAccepted = value ?? false);
                _triggerCheckboxAnimation();
                _triggerButtonAnimation();
              },
              widthRatio: widthRatio,
            ),
            
            SizedBox(height: 16 * widthRatio),

            // --- ‚ú® New Feature Start ---
            // Ï†ÑÏ≤¥ ÏïΩÍ¥Ä Î≥¥Í∏∞ Î≤ÑÌäº
            Align(
              alignment: Alignment.centerRight,
              child: TextButton(
                onPressed: () => _showFullTermsDialog(context),
                child: Text(
                  'Ï†ÑÏ≤¥ ÏÑúÎπÑÏä§ Ïù¥Ïö©ÏïΩÍ¥Ä Î∞è Î∂ÄÏπô Î≥¥Í∏∞',
                  style: TextStyle(
                    color: const Color(0xFF5F37CF),
                    fontSize: 14 * widthRatio,
                    fontFamily: 'Pretendard',
                    fontWeight: FontWeight.w600,
                    decoration: TextDecoration.underline,
                  ),
                ),
              ),
            ),
            // --- ‚ú® New Feature End ---
            
            SizedBox(height: 8 * widthRatio),

            // Additional Info
            Container(
              padding: EdgeInsets.all(16 * widthRatio),
              decoration: BoxDecoration(
                color: const Color(0xFF5F37CF).withOpacity(0.1),
                borderRadius: BorderRadius.circular(12 * widthRatio),
                border: Border.all(
                  color: const Color(0xFF5F37CF).withOpacity(0.3),
                ),
              ),
              child: Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Icon(
                    Icons.info_outline,
                    color: const Color(0xFF5F37CF),
                    size: 20 * widthRatio,
                  ),
                  SizedBox(width: 12 * widthRatio),
                  Expanded(
                    child: Text(
                      'Ïù¥Îü¨Ìïú Ï†ïÏ±ÖÏóê ÎèôÏùòÌï®ÏúºÎ°úÏç® Î™®ÎëêÎ•º ÏúÑÌïú ÏïàÏ†ÑÌïòÍ≥† ÌôòÏòÅÎ∞õÎäî Ïª§ÎÆ§ÎãàÌã∞Î•º ÎßåÎìúÎäî Îç∞ ÎèÑÏõÄÏùÑ Ï£ºÍ≥† ÏûàÏäµÎãàÎã§. Í≥ÑÏ†ï ÏÑ§Ï†ïÏóêÏÑú Ïñ∏Ï†úÎì†ÏßÄ Ï†ÑÏ≤¥ Ï†ïÏ±ÖÏùÑ Í≤ÄÌÜ†Ìï† Ïàò ÏûàÏäµÎãàÎã§.',
                      style: TextStyle(
                        fontSize: 14 * widthRatio,
                        color: const Color(0xFF121212).withOpacity(0.8),
                        fontFamily: 'Pretendard',
                        fontWeight: FontWeight.w400,
                      ),
                    ),
                  ),
                ],
              ),
            ),

            SizedBox(height: 40 * widthRatio),
          ],
        ),
      ),
    );
  }

  /// Build individual policy checkbox with modern design
  Widget _buildPolicyCheckbox({
    required String title,
    required String description,
    required bool value,
    required ValueChanged<bool?> onChanged,
    required double widthRatio,
  }) {
    return AnimatedBuilder(
      animation: _checkboxAnimation,
      builder: (context, child) {
        return Transform.scale(
          scale: value ? _checkboxAnimation.value : 1.0,
          child: Container(
            margin: EdgeInsets.only(bottom: 16 * widthRatio),
            padding: EdgeInsets.all(16 * widthRatio),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(12 * widthRatio),
              border: Border.all(
                color: value
                    ? const Color(0xFF5F37CF)
                    : const Color(0xFFE0E0E0),
                width: value ? 2 : 1,
              ),
            ),
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Transform.scale(
                  scale: 1.2,
                  child: Checkbox(
                    value: value,
                    onChanged: onChanged,
                    activeColor: const Color(0xFF5F37CF),
                    checkColor: Colors.white,
                    side: BorderSide(
                      color: value
                          ? const Color(0xFF5F37CF)
                          : const Color(0xFFC7C7C7),
                      width: 2,
                    ),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(4),
                    ),
                  ),
                ),
                SizedBox(width: 12 * widthRatio),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        title,
                        style: TextStyle(
                          fontSize: 16 * widthRatio,
                          fontWeight: FontWeight.w600,
                          color: const Color(0xFF121212),
                          fontFamily: 'Pretendard',
                        ),
                      ),
                      SizedBox(height: 4 * widthRatio),
                      Text(
                        description,
                        style: TextStyle(
                          fontSize: 14 * widthRatio,
                          color: const Color.fromARGB(255, 161, 158, 158),
                          fontFamily: 'Pretendard',
                          fontWeight: FontWeight.w400,
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  /// Build bottom confirm button with animation
  Widget _buildBottomButton(BuildContext context, double widthRatio) {
    return Container(
      width: double.infinity,
      padding: EdgeInsets.all(16.0 * widthRatio),
      child: AnimatedBuilder(
        animation: _buttonScaleAnimation,
        builder: (context, child) {
          return Transform.scale(
            scale: _allPoliciesAccepted ? _buttonScaleAnimation.value : 0.98,
            child: AnimatedContainer(
              duration: const Duration(milliseconds: 300),
              child: ElevatedButton(
                onPressed: (_isLoading || !_allPoliciesAccepted) ? null : _confirmAndFinish,
                style: ElevatedButton.styleFrom(
                  backgroundColor: _allPoliciesAccepted
                      ? const Color(0xFF5F37CF)
                      : const Color(0xFFBDBDBD),
                  disabledBackgroundColor: const Color(0xFFBDBDBD),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                  padding: EdgeInsets.symmetric(vertical: 16 * widthRatio),
                  elevation: _allPoliciesAccepted ? 2 : 0,
                ),
                child: _isLoading
                    ? const CircularProgressIndicator(color: Colors.white)
                    : Text(
                        'ÌôïÏù∏ Î∞è Ïª§ÎÆ§ÎãàÌã∞ Í∞ÄÏûÖ',
                        textAlign: TextAlign.center,
                        style: TextStyle(
                          color: _allPoliciesAccepted
                              ? Colors.white
                              : const Color(0xFFEEEEEE),
                          fontSize: 18 * widthRatio,
                          fontFamily: 'Pretendard',
                          fontWeight: FontWeight.w600,
                          height: 1.23,
                        ),
                      ),
              ),
            ),
          );
        },
      ),
    );
  }
}